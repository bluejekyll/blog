[
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1366",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1366/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1366/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1366/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1366",
    "id": 792644452,
    "node_id": "MDU6SXNzdWU3OTI2NDQ0NTI=",
    "number": 1366,
    "title": "Cleanup len() implementations",
    "user": {
      "login": "bluejekyll",
      "id": 986845,
      "node_id": "MDQ6VXNlcjk4Njg0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/986845?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bluejekyll",
      "html_url": "https://github.com/bluejekyll",
      "followers_url": "https://api.github.com/users/bluejekyll/followers",
      "following_url": "https://api.github.com/users/bluejekyll/following{/other_user}",
      "gists_url": "https://api.github.com/users/bluejekyll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bluejekyll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bluejekyll/subscriptions",
      "organizations_url": "https://api.github.com/users/bluejekyll/orgs",
      "repos_url": "https://api.github.com/users/bluejekyll/repos",
      "events_url": "https://api.github.com/users/bluejekyll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bluejekyll/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-23T20:35:18Z",
    "updated_at": "2021-01-23T20:35:18Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "Consider either add additional consts that represent things like `Name::root` or use `mem::size_of` to make the code more self-documenting.\r\n\r\nOne potential downside to using `mem::size_of` is that type sizes may accidentally be misaligned to the lengths expected in the DNS packets, which could potentially allow for accidental bugs to be inserted.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1364",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1364/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1364/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1364/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/pull/1364",
    "id": 791066225,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTU5MTgxNDQz",
    "number": 1364,
    "title": "Preserve EDNS OPT record in a response if truncation occurs",
    "user": {
      "login": "vlad20012",
      "id": 3221931,
      "node_id": "MDQ6VXNlcjMyMjE5MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3221931?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlad20012",
      "html_url": "https://github.com/vlad20012",
      "followers_url": "https://api.github.com/users/vlad20012/followers",
      "following_url": "https://api.github.com/users/vlad20012/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlad20012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlad20012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlad20012/subscriptions",
      "organizations_url": "https://api.github.com/users/vlad20012/orgs",
      "repos_url": "https://api.github.com/users/vlad20012/repos",
      "events_url": "https://api.github.com/users/vlad20012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlad20012/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-01-21T13:08:40Z",
    "updated_at": "2021-01-23T20:31:39Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/bluejekyll/trust-dns/pulls/1364",
      "html_url": "https://github.com/bluejekyll/trust-dns/pull/1364",
      "diff_url": "https://github.com/bluejekyll/trust-dns/pull/1364.diff",
      "patch_url": "https://github.com/bluejekyll/trust-dns/pull/1364.patch"
    },
    "body": "According to [RFC 6891](https://tools.ietf.org/html/rfc6891#section-7)\r\n> The minimal response MUST be the DNS header, question section, and **an\r\n   OPT record**.  This MUST also occur when a truncated response (using\r\n   the DNS header's TC bit) is returned.\r\n\r\nHence, we must preserve EDNS OPT record in an answer when truncation occurs",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1353",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1353/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1353/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1353/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1353",
    "id": 784619744,
    "node_id": "MDU6SXNzdWU3ODQ2MTk3NDQ=",
    "number": 1353,
    "title": "Resolver claims network is unreachable when iodef URL parsing bails",
    "user": {
      "login": "saethlin",
      "id": 12105168,
      "node_id": "MDQ6VXNlcjEyMTA1MTY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saethlin",
      "html_url": "https://github.com/saethlin",
      "followers_url": "https://api.github.com/users/saethlin/followers",
      "following_url": "https://api.github.com/users/saethlin/following{/other_user}",
      "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions",
      "organizations_url": "https://api.github.com/users/saethlin/orgs",
      "repos_url": "https://api.github.com/users/saethlin/repos",
      "events_url": "https://api.github.com/users/saethlin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saethlin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2021-01-12T21:51:53Z",
    "updated_at": "2021-01-14T01:10:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Observed on released trust-dns-proto/resolver 0.20.0 and 8f1a8eeff8389817d747ee621044f9c73a7f4622\r\n\r\nThis parsing failure of a probably-invalid iodef eventually causes the resolver to report that the network is unreachable, which seems pretty wrong to me. Ideally I would like to be able to see the bytes that failed to parse as a URL, but the resolver should definitely report the correct problem, and I'd really like to be able to see the rest of the parsed Message, perhaps with the malformed record missing. I'm willing to contribute a patch to fix this if you can offer some guidance.\r\n\r\nOffline reproducer:\r\n```rust\r\nuse trust_dns_proto::op::message::Message;\r\nfn main() {\r\n    let message: &[u8] = &[\r\n        91, 195, 129, 144, 0, 1, 0, 13, 0, 0, 0, 1, 6, 99, 112, 97, 110, 101, 108, 3, 99, 111, 109,\r\n        0, 0, 255, 0, 1, 192, 12, 0, 1, 0, 1, 0, 0, 0, 99, 0, 4, 208, 74, 121, 151, 192, 12, 0, 1,\r\n        0, 1, 0, 0, 0, 99, 0, 4, 208, 74, 123, 84, 192, 12, 1, 1, 0, 1, 0, 0, 56, 63, 0, 19, 0, 5,\r\n        105, 115, 115, 117, 101, 99, 111, 109, 111, 100, 111, 99, 97, 46, 99, 111, 109, 192, 12, 1,\r\n        1, 0, 1, 0, 0, 56, 63, 0, 35, 0, 5, 105, 111, 100, 101, 102, 109, 97, 105, 108, 116, 111,\r\n        58, 99, 97, 97, 45, 110, 111, 116, 105, 102, 121, 64, 99, 112, 97, 110, 101, 108, 46, 110,\r\n        101, 116, 192, 12, 1, 1, 0, 1, 0, 0, 56, 63, 0, 28, 0, 5, 105, 111, 100, 101, 102, 99, 97,\r\n        97, 45, 110, 111, 116, 105, 102, 121, 64, 99, 112, 97, 110, 101, 108, 46, 110, 101, 116,\r\n        192, 12, 0, 16, 0, 1, 0, 0, 0, 99, 0, 29, 28, 118, 61, 115, 112, 102, 49, 32, 109, 120, 32,\r\n        109, 120, 58, 99, 112, 97, 110, 101, 108, 46, 110, 101, 116, 32, 45, 97, 108, 108, 192, 12,\r\n        0, 16, 0, 1, 0, 0, 0, 99, 0, 130, 129, 104, 111, 117, 45, 49, 46, 102, 114, 111, 110, 116,\r\n        101, 110, 100, 46, 119, 119, 119, 46, 112, 114, 111, 100, 46, 99, 112, 97, 110, 101, 108,\r\n        46, 110, 101, 116, 58, 32, 84, 117, 101, 32, 74, 97, 110, 32, 49, 50, 32, 49, 51, 58, 51,\r\n        49, 58, 49, 49, 32, 50, 48, 50, 49, 32, 72, 84, 84, 80, 32, 79, 75, 58, 32, 72, 84, 84, 80,\r\n        47, 49, 46, 49, 32, 50, 48, 48, 32, 79, 75, 32, 45, 32, 51, 52, 51, 51, 50, 32, 98, 121,\r\n        116, 101, 115, 32, 105, 110, 32, 48, 46, 48, 54, 51, 32, 115, 101, 99, 111, 110, 100, 32,\r\n        114, 101, 115, 112, 111, 110, 115, 101, 32, 116, 105, 109, 101, 192, 12, 0, 16, 0, 1, 0, 0,\r\n        0, 99, 0, 130, 129, 100, 97, 108, 45, 49, 46, 102, 114, 111, 110, 116, 101, 110, 100, 46,\r\n        119, 119, 119, 46, 112, 114, 111, 100, 46, 99, 112, 97, 110, 101, 108, 46, 110, 101, 116,\r\n        58, 32, 84, 117, 101, 32, 74, 97, 110, 32, 49, 50, 32, 49, 51, 58, 51, 50, 58, 51, 57, 32,\r\n        50, 48, 50, 49, 32, 72, 84, 84, 80, 32, 79, 75, 58, 32, 72, 84, 84, 80, 47, 49, 46, 49, 32,\r\n        50, 48, 48, 32, 79, 75, 32, 45, 32, 51, 52, 51, 51, 50, 32, 98, 121, 116, 101, 115, 32,\r\n        105, 110, 32, 48, 46, 48, 49, 49, 32, 115, 101, 99, 111, 110, 100, 32, 114, 101, 115, 112,\r\n        111, 110, 115, 101, 32, 116, 105, 109, 101, 192, 12, 0, 6, 0, 1, 0, 0, 56, 103, 0, 40, 1,\r\n        99, 6, 99, 112, 97, 110, 101, 108, 3, 110, 101, 116, 0, 3, 100, 110, 115, 194, 5, 120, 28,\r\n        79, 3, 0, 0, 56, 64, 0, 0, 28, 32, 0, 36, 234, 0, 0, 1, 81, 128, 192, 12, 0, 2, 0, 1, 0, 0,\r\n        56, 63, 0, 2, 194, 3, 192, 12, 0, 2, 0, 1, 0, 0, 56, 63, 0, 5, 2, 109, 110, 194, 5, 192,\r\n        12, 0, 2, 0, 1, 0, 0, 56, 63, 0, 5, 2, 104, 103, 194, 5, 192, 12, 0, 15, 0, 1, 0, 0, 0,\r\n        139, 0, 8, 0, 0, 3, 109, 120, 49, 192, 12, 0, 0, 41, 2, 0, 0, 0, 128, 0, 0, 0,\r\n    ][..];\r\n    println!(\"{:?}\", Message::from_vec(message));\r\n}\r\n```\r\n\r\nOnline reproducer:\r\n```rust\r\nuse trust_dns_proto::rr::record_type::RecordType;\r\nuse trust_dns_resolver::config::{ResolverConfig, ResolverOpts};\r\nuse trust_dns_resolver::Resolver;\r\nfn main() {\r\n    let resolver = Resolver::new(ResolverConfig::default(), ResolverOpts::default()).unwrap();\r\n    let response = resolver.lookup(\"cpanel.net\", RecordType::CAA);\r\n    println!(\"{:?}\", response);\r\n}\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1342",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1342/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1342/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1342/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1342",
    "id": 783045341,
    "node_id": "MDU6SXNzdWU3ODMwNDUzNDE=",
    "number": 1342,
    "title": "Wildcards match only one label ",
    "user": {
      "login": "SivaKesava1",
      "id": 11771739,
      "node_id": "MDQ6VXNlcjExNzcxNzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11771739?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SivaKesava1",
      "html_url": "https://github.com/SivaKesava1",
      "followers_url": "https://api.github.com/users/SivaKesava1/followers",
      "following_url": "https://api.github.com/users/SivaKesava1/following{/other_user}",
      "gists_url": "https://api.github.com/users/SivaKesava1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SivaKesava1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SivaKesava1/subscriptions",
      "organizations_url": "https://api.github.com/users/SivaKesava1/orgs",
      "repos_url": "https://api.github.com/users/SivaKesava1/repos",
      "events_url": "https://api.github.com/users/SivaKesava1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SivaKesava1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 245488043,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDM=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/bug",
        "name": "bug",
        "color": "fc2929",
        "default": true,
        "description": null
      },
      {
        "id": 2480373148,
        "node_id": "MDU6TGFiZWwyNDgwMzczMTQ4",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/compliance",
        "name": "compliance",
        "color": "fbca04",
        "default": false,
        "description": "Not compliant to DNS standard operations"
      },
      {
        "id": 692624038,
        "node_id": "MDU6TGFiZWw2OTI2MjQwMzg=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:server",
        "name": "crate:server",
        "color": "d4c5f9",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-01-11T03:56:14Z",
    "updated_at": "2021-01-13T16:50:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hello,\r\n\r\nWildcards can match not only one label but multiple whole labels ([RFC 1034](https://tools.ietf.org/html/rfc1034)). Trust-DNS accepts wildcard records but matches only one label. \r\n\r\nConsider the following example:\r\n\r\n|  \t|  \t|  \t|  \t|\r\n|-\t|-\t|-\t|-\t|\r\n| example.com. \t| 500 | SOA \t| ns1.outside.com. root.example.com. 3 604800 86400 2419200 604800 \t|\r\n| example.com. \t| 500 | NS \t| ns1.outside.com.  \t|\r\n|*example.com. \t| 500 | A|  1.1.1.1 \t|\r\n\r\nFor queries of the kind, `<something.example.com., A>`,  the server returns the `A` record. But if the query has more than one label before `example.com`, then the `A` record is not returned; instead, an `NXDOMAIN` is returned.  Wildcards are pervasive in DNS - [Surveying DNS Wildcard Usage Among the Good, the Bad, and the Ugly.](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.259.7560&rep=rep1&type=pdf)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1337",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1337/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1337/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1337/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/pull/1337",
    "id": 777553302,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ3ODE3NzY2",
    "number": 1337,
    "title": "Streaming API for Resolver",
    "user": {
      "login": "bluejekyll",
      "id": 986845,
      "node_id": "MDQ6VXNlcjk4Njg0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/986845?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bluejekyll",
      "html_url": "https://github.com/bluejekyll",
      "followers_url": "https://api.github.com/users/bluejekyll/followers",
      "following_url": "https://api.github.com/users/bluejekyll/following{/other_user}",
      "gists_url": "https://api.github.com/users/bluejekyll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bluejekyll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bluejekyll/subscriptions",
      "organizations_url": "https://api.github.com/users/bluejekyll/orgs",
      "repos_url": "https://api.github.com/users/bluejekyll/repos",
      "events_url": "https://api.github.com/users/bluejekyll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bluejekyll/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-01-03T01:15:59Z",
    "updated_at": "2021-01-23T20:24:15Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/bluejekyll/trust-dns/pulls/1337",
      "html_url": "https://github.com/bluejekyll/trust-dns/pull/1337",
      "diff_url": "https://github.com/bluejekyll/trust-dns/pull/1337.diff",
      "patch_url": "https://github.com/bluejekyll/trust-dns/pull/1337.patch"
    },
    "body": "Migrate resolver to streaming API\r\n\r\n- [x] remove SmallVec from DNSResponse\r\n- [ ] Change DnsHandle to return Stream on `send`\r\n- [ ] Use channel instead of oneshot for DnsResponseFuture\r\n- [ ] Introduce Resolver streaming API\r\n- [ ] Deprecate old Resolver API?\r\n\r\nfixes: #383\r\n\r\nSee discussion on common DNS api for Reqwest here: https://github.com/seanmonstar/reqwest/issues/1125",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1335",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1335/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1335/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1335/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1335",
    "id": 775768167,
    "node_id": "MDU6SXNzdWU3NzU3NjgxNjc=",
    "number": 1335,
    "title": "Ability to call setsockopt on resolver's underlying DNS client",
    "user": {
      "login": "zonyitoo",
      "id": 1067951,
      "node_id": "MDQ6VXNlcjEwNjc5NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1067951?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zonyitoo",
      "html_url": "https://github.com/zonyitoo",
      "followers_url": "https://api.github.com/users/zonyitoo/followers",
      "following_url": "https://api.github.com/users/zonyitoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/zonyitoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zonyitoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zonyitoo/subscriptions",
      "organizations_url": "https://api.github.com/users/zonyitoo/orgs",
      "repos_url": "https://api.github.com/users/zonyitoo/repos",
      "events_url": "https://api.github.com/users/zonyitoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zonyitoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 692624377,
        "node_id": "MDU6TGFiZWw2OTI2MjQzNzc=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:resolver",
        "name": "crate:resolver",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 245488045,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDU=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/enhance",
        "name": "enhance",
        "color": "1d76db",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-12-29T08:24:40Z",
    "updated_at": "2021-01-05T14:55:15Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nI was making a proxy server and using trust-dns to resolves remote servers' domain names. To distinguish proxy servers' outbound connections, I set `SO_MARK` option on sockets.\r\n\r\nBut there is no way to set `SO_MARK` on trust-dns-resolver's internal connection, which specifically is:\r\n\r\nhttps://github.com/bluejekyll/trust-dns/blob/58b9ec98853fd46c50b1bb50195911bd104758b7/crates/resolver/src/name_server/connection_provider.rs#L106-L206\r\n\r\nWithout the ability to set `SO_MARK` or other related options, like `SO_BINDTODEVICE`, data sent from trust-dns-resolver will cause infinity loops:\r\n\r\n```\r\nCLIENT -> PROXY (trust-dns lookup_ip) -> PROXY (trust-dns lookup_ip) -> ...\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\n1. Provide limited options like `SO_MARK`, `SO_BINDTODEVICE` to `ResolverOpts`\r\n2. Allow customizing the connecting process without rewrite the whole `GenericConnectionProvider`.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nCopy `connection_provider.rs` and customize my own version of `ConnectionProvider`\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1331",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1331/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1331/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1331/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1331",
    "id": 775285159,
    "node_id": "MDU6SXNzdWU3NzUyODUxNTk=",
    "number": 1331,
    "title": "CNAME TTL handling is broken when `LookupIpStrategy::Ipv4AndIpv6` or `LookupIpStrategy::Ipv6thenIpv4`",
    "user": {
      "login": "database64128",
      "id": 18757988,
      "node_id": "MDQ6VXNlcjE4NzU3OTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/18757988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/database64128",
      "html_url": "https://github.com/database64128",
      "followers_url": "https://api.github.com/users/database64128/followers",
      "following_url": "https://api.github.com/users/database64128/following{/other_user}",
      "gists_url": "https://api.github.com/users/database64128/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/database64128/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/database64128/subscriptions",
      "organizations_url": "https://api.github.com/users/database64128/orgs",
      "repos_url": "https://api.github.com/users/database64128/repos",
      "events_url": "https://api.github.com/users/database64128/events{/privacy}",
      "received_events_url": "https://api.github.com/users/database64128/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 245488043,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDM=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/bug",
        "name": "bug",
        "color": "fc2929",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-28T08:48:40Z",
    "updated_at": "2020-12-29T03:00:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\nWhen using `LookupIpStrategy::Ipv4AndIpv6` or `LookupIpStrategy::Ipv6thenIpv4`, the resolver will always send a query for the domain name, if the response only has an A record.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Consider \"a CNAME b\" with a 900s TTL, \"b A 1.1.1.1\" with a 900s TTL.\r\n2. Configure the resolver with `LookupIpStrategy::Ipv4AndIpv6` or `LookupIpStrategy::Ipv6thenIpv4`.\r\n3. Use the resolver to resolve \"a\".\r\n4. After the first resolution completed, resolve the same hostname again.\r\n5. The resolver sends another query for \"a\". Upon receiving the response \"CNAME b\", it tries to recursively resolve \"b\", hits cache and completes the query.\r\n\r\n**Expected behavior**\r\nCNAME TTL is properly handled. The response is cached. No queries are sent before the cache expires.\r\n\r\n**Version:**\r\nCrate: resolver\r\nVersion: 57245de\r\n\r\n**Additional context**\r\nRelated: #273, #298.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1323",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1323/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1323/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1323/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1323",
    "id": 770425306,
    "node_id": "MDU6SXNzdWU3NzA0MjUzMDY=",
    "number": 1323,
    "title": "Support for SVCB/HTTPS record type",
    "user": {
      "login": "tanyav2",
      "id": 22015936,
      "node_id": "MDQ6VXNlcjIyMDE1OTM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22015936?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tanyav2",
      "html_url": "https://github.com/tanyav2",
      "followers_url": "https://api.github.com/users/tanyav2/followers",
      "following_url": "https://api.github.com/users/tanyav2/following{/other_user}",
      "gists_url": "https://api.github.com/users/tanyav2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tanyav2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tanyav2/subscriptions",
      "organizations_url": "https://api.github.com/users/tanyav2/orgs",
      "repos_url": "https://api.github.com/users/tanyav2/repos",
      "events_url": "https://api.github.com/users/tanyav2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tanyav2/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 245488045,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDU=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/enhance",
        "name": "enhance",
        "color": "1d76db",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-17T22:36:29Z",
    "updated_at": "2020-12-29T03:37:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "[trust-dns-client](https://docs.rs/trust-dns-client/0.19.6/trust_dns_client/rr/enum.RecordType.html) does not support [SVCB/HTTPS](https://tools.ietf.org/html/draft-ietf-dnsop-svcb-httpssvc-03) record type. This is now supported by [miekg/dns](https://github.com/miekg/dns/pull/1067) which is a popular Go DNS implementation.\r\n\r\nCurrently, we can use `RecordType::Unknown(65)` to query this record.\r\n\r\nI'm happy to submit a PR for this implementation, if this is something that can be supported.\r\n\r\ncc @chris-wood @lekensteyn\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1309",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1309/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1309/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1309/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1309",
    "id": 755664180,
    "node_id": "MDU6SXNzdWU3NTU2NjQxODA=",
    "number": 1309,
    "title": "Clarification regarding `Authority`",
    "user": {
      "login": "jonasbb",
      "id": 273459,
      "node_id": "MDQ6VXNlcjI3MzQ1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/273459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasbb",
      "html_url": "https://github.com/jonasbb",
      "followers_url": "https://api.github.com/users/jonasbb/followers",
      "following_url": "https://api.github.com/users/jonasbb/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasbb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasbb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasbb/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasbb/orgs",
      "repos_url": "https://api.github.com/users/jonasbb/repos",
      "events_url": "https://api.github.com/users/jonasbb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasbb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 839628886,
        "node_id": "MDU6TGFiZWw4Mzk2Mjg4ODY=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/question",
        "name": "question",
        "color": "eeeeee",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-12-02T22:41:29Z",
    "updated_at": "2020-12-30T22:57:03Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Currently, I am trying to implement an authoritative DNS server with the help of `trust-dns-server`. I am not sure what exactly the difference between [`Authority::lookup`](https://docs.rs/trust-dns-server/0.20.0-alpha.3/trust_dns_server/authority/trait.Authority.html#tymethod.lookup) and [`Authority::search`](https://docs.rs/trust-dns-server/0.20.0-alpha.3/trust_dns_server/authority/trait.Authority.html#tymethod.search) is. It sounds like the only difference is if I give it a query with separate name and type components or combined into a `LowerQuery`.\r\n\r\nHowever, this is not the case for the `InMemoryAuthority` ([implementation](https://github.com/bluejekyll/trust-dns/blob/028ac68ee016c1b5d92366ee5fe6661f6132de4d/crates/server/src/store/in_memory/authority.rs#L962)).\r\n`search` forwards to `lookup` in some cases but also implements some additional logic.\r\nSome parts, for example the handling of `SOA` entries, I do not understand.\r\nhttps://github.com/bluejekyll/trust-dns/blob/028ac68ee016c1b5d92366ee5fe6661f6132de4d/crates/server/src/store/in_memory/authority.rs#L990-L993\r\nThis code snippet always returns a SOA record for the zone root, if the query is of type SOA but ignoring the query name.\r\n\r\nThis is not how SOAs are usually processed. A SOA is included in a NODATA response because the miminum value of the SOA is needed for the negative caching. The SOA is in the authority section. The `InMemoryAuthority::search` function from above will, however, put the SOA in the answer section.\r\n\r\nSo my question is what is the intended difference between these two functions?\r\n\r\n```text\r\n$ dig @ns1.google.com soa www.google.com\r\n\r\n; <<>> DiG 9.11.24-RedHat-9.11.24-2.fc33 <<>> @ns1.google.com soa www.google.com\r\n; (2 servers found)\r\n;; global options: +cmd\r\n;; Got answer:\r\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 2887\r\n;; flags: qr aa rd; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1\r\n;; WARNING: recursion requested but not available\r\n\r\n;; OPT PSEUDOSECTION:\r\n; EDNS: version: 0, flags:; udp: 512\r\n;; QUESTION SECTION:\r\n;www.google.com.\t\t\tIN\tSOA\r\n\r\n;; AUTHORITY SECTION:\r\ngoogle.com.\t\t60\tIN\tSOA\tns1.google.com. dns-admin.google.com. 345197775 900 900 1800 60\r\n\r\n;; Query time: 57 msec\r\n;; SERVER: 2001:4860:4802:32::a#53(2001:4860:4802:32::a)\r\n;; WHEN: Mi Dez 02 23:34:13 CET 2020\r\n;; MSG SIZE  rcvd: 93\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1308",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1308/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1308/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1308/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1308",
    "id": 754813806,
    "node_id": "MDU6SXNzdWU3NTQ4MTM4MDY=",
    "number": 1308,
    "title": "Redesign the `cargo install` experience",
    "user": {
      "login": "briansmith",
      "id": 16816,
      "node_id": "MDQ6VXNlcjE2ODE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/16816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/briansmith",
      "html_url": "https://github.com/briansmith",
      "followers_url": "https://api.github.com/users/briansmith/followers",
      "following_url": "https://api.github.com/users/briansmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/briansmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/briansmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/briansmith/subscriptions",
      "organizations_url": "https://api.github.com/users/briansmith/orgs",
      "repos_url": "https://api.github.com/users/briansmith/repos",
      "events_url": "https://api.github.com/users/briansmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/briansmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 386818578,
        "node_id": "MDU6TGFiZWwzODY4MTg1Nzg=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/trust",
        "name": "trust",
        "color": "0052cc",
        "default": false,
        "description": null
      },
      {
        "id": 245488048,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDg=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/unclear",
        "name": "unclear",
        "color": "777777",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-12-01T23:50:53Z",
    "updated_at": "2020-12-29T03:38:02Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I did `cargo install trust-dns` which installed a binary `named` in `/.cargo/bin/named`. There's nothing wrong with that, but I wonder if the names of trust-dns binaries should be prefixed with `trust-dns` to avoid any potential for collisions?\r\n\r\nAlso, because somebody can use `cargo install trust-dns` to install `named`, and because a Cargo.lock is used, it seems like a patch and new release is needed any time a security update is made to a dependency (including any transitive dependency) of trust-dns, if that security update is at all relevant to trust-dns's use of the dependency. Otherwise, people running `cargo install` might get a version with a vulnerability. Maybe it would make more sense for the binaries like `named` to be in their own crate(s) that are versioned independently so that library users would be less affected by such situations.\r\n\r\nOr, perhaps Trust-DNS binaries are not to be installed with `cargo install`? Just because you can, doesn't mean you should.\r\n\r\nReally my goal here is to just to start a conversation to make sure these issues have been considered.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1283",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1283/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1283/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1283/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1283",
    "id": 741135840,
    "node_id": "MDU6SXNzdWU3NDExMzU4NDA=",
    "number": 1283,
    "title": "CNAME loops throws off the server",
    "user": {
      "login": "SivaKesava1",
      "id": 11771739,
      "node_id": "MDQ6VXNlcjExNzcxNzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11771739?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SivaKesava1",
      "html_url": "https://github.com/SivaKesava1",
      "followers_url": "https://api.github.com/users/SivaKesava1/followers",
      "following_url": "https://api.github.com/users/SivaKesava1/following{/other_user}",
      "gists_url": "https://api.github.com/users/SivaKesava1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SivaKesava1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SivaKesava1/subscriptions",
      "organizations_url": "https://api.github.com/users/SivaKesava1/orgs",
      "repos_url": "https://api.github.com/users/SivaKesava1/repos",
      "events_url": "https://api.github.com/users/SivaKesava1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SivaKesava1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 245488043,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDM=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/bug",
        "name": "bug",
        "color": "fc2929",
        "default": true,
        "description": null
      },
      {
        "id": 2480373148,
        "node_id": "MDU6TGFiZWwyNDgwMzczMTQ4",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/compliance",
        "name": "compliance",
        "color": "fbca04",
        "default": false,
        "description": "Not compliant to DNS standard operations"
      },
      {
        "id": 692624038,
        "node_id": "MDU6TGFiZWw2OTI2MjQwMzg=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:server",
        "name": "crate:server",
        "color": "d4c5f9",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-11T23:15:00Z",
    "updated_at": "2020-11-13T00:51:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi again,\r\n\r\nIf the zone file has a _CNAME_ loop, the server does not respond to the later queries if a query related to the loop is asked. \r\n\r\n**Please, feel free to put this one also under the compliance tag or even ignore it, considering the zone file is not proper.** \r\n\r\nConsider the following example zone file: (I just picked a loop of length 2, but it could be longer)\r\n\r\n|  \t|  \t|  \t|  \t|\r\n|-\t|-\t|-\t|-\t|\r\n| example.com. \t| 500 | SOA \t| ns1.outside.com. root.example.com. 3 604800 86400 2419200 604800 \t|\r\n| example.com. \t| 500 | NS \t| ns1.outside.com.  \t|\r\n|b.c.example.com. \t| 500 | CNAME |  l.c.example.com. \t|\r\n|l.c.example.com \t| 500| CNAME \t| b.c.example.com  \t|\r\n\r\nThe server responds to the queries normally if the query is not either of _b.c.example.com._ or _l.c.example.com._. The debug log looks normal like\r\n\r\n```\r\n1605133463.060458:DEBUG:trust_dns_server::server::server_future:79:received udp request from: 127.0.0.1:41046\r\n1605133463.060528:INFO:trust_dns_server::server::server_future:600:request: 52635 type: Query op_code: Query dnssec: false name: a.campus.edu. type: A class: IN\r\n1605133463.060557:DEBUG:trust_dns_server::authority::catalog:133:query received: 52635\r\n1605133463.060592:DEBUG:trust_dns_server::authority::catalog:454:searching authorities for: a.campus.edu.\r\n1605133463.060600:DEBUG:trust_dns_server::authority::catalog:454:searching authorities for: campus.edu.\r\n1605133463.060605:INFO:trust_dns_server::authority::catalog:527:request: 52635 found authority: campus.edu.\r\n1605133463.060608:DEBUG:trust_dns_server::authority::catalog:547:no DAU in request, used default SupportAlgorithms\r\n1605133463.060609:DEBUG:trust_dns_server::authority::catalog:563:performing name: a.campus.edu. type: A class: IN on campus.edu.\r\n1605133463.060612:DEBUG:trust_dns_server::store::in_memory::authority:968:searching InMemoryAuthority for: name: a.campus.edu. type: A class: IN\r\n1605133463.060623:DEBUG:trust_dns_server::authority::catalog:633:handling authoritative request: 52635\r\n1605133463.060644:DEBUG:trust_dns_server::authority::catalog:872:request: 52635 non-existent\r\n1605133463.060659:INFO:trust_dns_server::server::response_handler:49:response: 52635 response_code: 3\r\n```\r\n\r\nWhen the query _b.c.example.com._ is asked for the first time, the logs are as follows:\r\n```\r\n1605133487.804866:DEBUG:trust_dns_server::server::server_future:79:received udp request from: 127.0.0.1:38536\r\n1605133487.804955:INFO:trust_dns_server::server::server_future:600:request: 55991 type: Query op_code: Query dnssec: false name: b.c.campus.edu. type: A class: IN\r\n1605133487.804962:DEBUG:trust_dns_server::authority::catalog:133:query received: 55991\r\n1605133487.804964:DEBUG:trust_dns_server::authority::catalog:454:searching authorities for: b.c.campus.edu.\r\n1605133487.805018:DEBUG:trust_dns_server::authority::catalog:454:searching authorities for: c.campus.edu.\r\n1605133487.805076:DEBUG:trust_dns_server::authority::catalog:454:searching authorities for: campus.edu.\r\n1605133487.805084:INFO:trust_dns_server::authority::catalog:527:request: 55991 found authority: campus.edu.\r\n1605133487.805110:DEBUG:trust_dns_server::authority::catalog:547:no DAU in request, used default SupportAlgorithms\r\n1605133487.805114:DEBUG:trust_dns_server::authority::catalog:563:performing name: b.c.campus.edu. type: A class: IN on campus.edu.\r\n1605133487.805118:DEBUG:trust_dns_server::store::in_memory::authority:968:searching InMemoryAuthority for: name: b.c.campus.edu. type: A class: IN\r\n\r\n1605133492.805057:DEBUG:trust_dns_server::server::server_future:79:received udp request from: 127.0.0.1:38536\r\n1605133492.805119:INFO:trust_dns_server::server::server_future:600:request: 55991 type: Query op_code: Query dnssec: false name: b.c.campus.edu. type: A class: IN\r\n1605133492.805126:DEBUG:trust_dns_server::authority::catalog:133:query received: 55991\r\n1605133492.805129:DEBUG:trust_dns_server::authority::catalog:454:searching authorities for: b.c.campus.edu.\r\n1605133492.805133:DEBUG:trust_dns_server::authority::catalog:454:searching authorities for: c.campus.edu.\r\n1605133492.805135:DEBUG:trust_dns_server::authority::catalog:454:searching authorities for: campus.edu.\r\n1605133492.805149:INFO:trust_dns_server::authority::catalog:527:request: 55991 found authority: campus.edu.\r\n1605133492.805176:DEBUG:trust_dns_server::authority::catalog:547:no DAU in request, used default SupportAlgorithms\r\n1605133492.805181:DEBUG:trust_dns_server::authority::catalog:563:performing name: b.c.campus.edu. type: A class: IN on campus.edu.\r\n1605133492.805186:DEBUG:trust_dns_server::store::in_memory::authority:968:searching InMemoryAuthority for: name: b.c.campus.edu. type: A class: IN\r\n\r\n1605133497.805199:DEBUG:trust_dns_server::server::server_future:79:received udp request from: 127.0.0.1:38536\r\n1605133497.805284:INFO:trust_dns_server::server::server_future:600:request: 55991 type: Query op_code: Query dnssec: false name: b.c.campus.edu. type: A class: IN\r\n1605133497.805293:DEBUG:trust_dns_server::authority::catalog:133:query received: 55991\r\n1605133497.805297:DEBUG:trust_dns_server::authority::catalog:454:searching authorities for: b.c.campus.edu.\r\n1605133497.805302:DEBUG:trust_dns_server::authority::catalog:454:searching authorities for: c.campus.edu.\r\n1605133497.805328:DEBUG:trust_dns_server::authority::catalog:454:searching authorities for: campus.edu.\r\n1605133497.805336:INFO:trust_dns_server::authority::catalog:527:request: 55991 found authority: campus.edu.\r\n1605133497.805343:DEBUG:trust_dns_server::authority::catalog:547:no DAU in request, used default SupportAlgorithms\r\n1605133497.805346:DEBUG:trust_dns_server::authority::catalog:563:performing name: b.c.campus.edu. type: A class: IN on campus.edu.\r\n1605133497.805370:DEBUG:trust_dns_server::store::in_memory::authority:968:searching InMemoryAuthority for: name: b.c.campus.edu. type: A class: IN\r\n```\r\n\r\n\r\nIt looks like the same message is processed thrice. After that, the server hangs up (sometimes after responding to one or two more other queries). The debug logs do not show any error message, but a `dig` query returns `connection timed out; no servers could be reached.`\r\n\r\n**System:**\r\n - OS: Ubuntu\r\n - Architecture:  x86_64\r\n - Version: 18\r\n - rustc version: cargo 1.47.0",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1277",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1277/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1277/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1277/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1277",
    "id": 738628667,
    "node_id": "MDU6SXNzdWU3Mzg2Mjg2Njc=",
    "number": 1277,
    "title": "client: AXFR not return all records",
    "user": {
      "login": "visig9",
      "id": 1289913,
      "node_id": "MDQ6VXNlcjEyODk5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1289913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/visig9",
      "html_url": "https://github.com/visig9",
      "followers_url": "https://api.github.com/users/visig9/followers",
      "following_url": "https://api.github.com/users/visig9/following{/other_user}",
      "gists_url": "https://api.github.com/users/visig9/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/visig9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/visig9/subscriptions",
      "organizations_url": "https://api.github.com/users/visig9/orgs",
      "repos_url": "https://api.github.com/users/visig9/repos",
      "events_url": "https://api.github.com/users/visig9/events{/privacy}",
      "received_events_url": "https://api.github.com/users/visig9/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 245488043,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDM=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/bug",
        "name": "bug",
        "color": "fc2929",
        "default": true,
        "description": null
      },
      {
        "id": 2480373148,
        "node_id": "MDU6TGFiZWwyNDgwMzczMTQ4",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/compliance",
        "name": "compliance",
        "color": "fbca04",
        "default": false,
        "description": "Not compliant to DNS standard operations"
      },
      {
        "id": 692623508,
        "node_id": "MDU6TGFiZWw2OTI2MjM1MDg=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:client",
        "name": "crate:client",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 386819191,
        "node_id": "MDU6TGFiZWwzODY4MTkxOTE=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/ops",
        "name": "ops",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-11-09T02:39:38Z",
    "updated_at": "2020-11-10T16:16:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\nI'm try to use `trust_dns_client` in company internal network to fetch all records by AXFR request. But I found the returned records not the same as results of `dig`.\r\n\r\n`dig` version (use `example.com.` to replace real domain):\r\n\r\n```\r\n$ dig -t axfr example.com. @172.20.1.5\r\n\r\n; <<>> DiG 9.10.3-P4-Ubuntu <<>> -t axfr example.com. @172.20.1.5\r\n;; global options: +cmd\r\n\r\n... omit ...\r\n\r\n;; Query time: 49 msec\r\n;; SERVER: 172.20.1.5#53(172.20.1.5)\r\n;; WHEN: Mon Nov 09 09:57:12 CST 2020\r\n;; XFR size: 660 records (messages 2, bytes 16795)\r\n```\r\n\r\nThe `trust-dns-client` axfr-test program:\r\n\r\n```\r\n$ ./axfr-test\r\nnumber of message in response: 1\r\nnumber of record in response answer: 405\r\n```\r\n\r\nI notice the result of `dig` indicated it has 660 records + 2 messages, but in my sample code only has 405 records + 1 message. It maybe a bug?\r\n\r\n\r\n\r\n**To Reproduce**\r\n\r\nThe code of `axfr-test`:\r\n\r\n```rust\r\nuse std::net::{IpAddr, SocketAddr};\r\nuse trust_dns_client::{\r\n    client::SyncClient,\r\n    rr::{DNSClass, Name, Record, RecordType},\r\n};\r\n\r\nfn main() {\r\n    // TODO: use real `nameserver` and `domain` in here\r\n    let nameserver: IpAddr = [172, 20, 1, 5].into();\r\n    let domain: Name = \"example.com.\".parse().unwrap();\r\n\r\n    let records = query_axfr(nameserver, &domain);\r\n\r\n    println!(\"number of record in response answer: {}\", records.len());\r\n}\r\n\r\nfn query_axfr(nameserver: IpAddr, domain: &Name) -> Vec<Record> {\r\n    let client = SyncClient::new(\r\n        trust_dns_client::tcp::TcpClientConnection::new(SocketAddr::new(nameserver, 53))\r\n            .expect(\"create tcp client connection failed\"),\r\n    );\r\n\r\n    let response =\r\n        trust_dns_client::client::Client::query(&client, domain, DNSClass::IN, RecordType::AXFR)\r\n            .expect(\"DNS query failed\");\r\n\r\n    println!(\"number of message in response: {}\", response.len());\r\n\r\n    response\r\n        .messages()\r\n        .map(|msg| msg.answers())\r\n        .flatten()\r\n        .cloned()\r\n        .collect()\r\n}\r\n```\r\n\r\n\r\n**Expected behavior**\r\n`axfr-test` should have the same results of `dig`. \r\n\r\n**System:**\r\n - OS: ubuntu\r\n - Architecture: x86_64\r\n - Version 16.04\r\n - rustc version: 1.47.0\r\n\r\n**Version:**\r\nCrate: client\r\nVersion: 0.19.5\r\n\r\n**Additional context**\r\nN/A\r\n\r\nThanks help!",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1275",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1275/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1275/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1275/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1275",
    "id": 735829957,
    "node_id": "MDU6SXNzdWU3MzU4Mjk5NTc=",
    "number": 1275,
    "title": "Query matching empty wildcard node returned with NXDOMAIN instead of NOERROR",
    "user": {
      "login": "SivaKesava1",
      "id": 11771739,
      "node_id": "MDQ6VXNlcjExNzcxNzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11771739?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SivaKesava1",
      "html_url": "https://github.com/SivaKesava1",
      "followers_url": "https://api.github.com/users/SivaKesava1/followers",
      "following_url": "https://api.github.com/users/SivaKesava1/following{/other_user}",
      "gists_url": "https://api.github.com/users/SivaKesava1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SivaKesava1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SivaKesava1/subscriptions",
      "organizations_url": "https://api.github.com/users/SivaKesava1/orgs",
      "repos_url": "https://api.github.com/users/SivaKesava1/repos",
      "events_url": "https://api.github.com/users/SivaKesava1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SivaKesava1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2480373148,
        "node_id": "MDU6TGFiZWwyNDgwMzczMTQ4",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/compliance",
        "name": "compliance",
        "color": "fbca04",
        "default": false,
        "description": "Not compliant to DNS standard operations"
      },
      {
        "id": 692624038,
        "node_id": "MDU6TGFiZWw2OTI2MjQwMzg=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:server",
        "name": "crate:server",
        "color": "d4c5f9",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-04T05:46:56Z",
    "updated_at": "2020-11-04T17:50:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi again,\r\n\r\nI found a not so commonly used case where the authoritative DNS server does something slightly off. \r\nConsider the following example zone file:\r\n\r\n|  \t|  \t|  \t|  \t|\r\n|-\t|-\t|-\t|-\t|\r\n| example.com. \t| 500 | SOA \t| ns1.outside.com. root.example.com. 3 604800 86400 2419200 604800 \t|\r\n| example.com. \t| 500 | NS \t| ns1.outside.com.  \t|\r\n| f.*.e.example.com. \t| 500 | A| 2.2.2.2 \t|\r\n| t.e.example.com. \t| 500| A \t| 1.1.1.1  \t|\r\n\r\nFor the query _<something.e.example.com. , A>_, the server returns the following response:\r\n```\r\n          \"opcode QUERY\",\r\n          \"rcode NXDOMAIN\",\r\n          \"flags QR AA\",\r\n          \";QUESTION\",\r\n          \"something.e.example.com. IN A\",\r\n          \";ANSWER\",\r\n          \";AUTHORITY\",\r\n          \"example.com. 500 IN SOA ns1.outside.com. root.example.com. 3 604800 86400 2419200 604800\",\r\n          \";ADDITIONAL\"\r\n```\r\n\r\n**Expected behavior**\r\nThe query name _something.e.example.com._ will match the empty wildcard node, so the rcode should be `NOERROR` instead of `NXDOMAIN.` The other implementations like BIND, NSD, PowerDNS, Knot return `NOERROR` code with everything else being the same.\r\n\r\n**System:**\r\n - OS: Ubuntu\r\n - Architecture:  x86_64\r\n - Version: 18\r\n - rustc version: cargo 1.47.0\r\n\r\n@bluejekyll, sorry for just filing issues and not contributing to the codebase currently as I have to pick up Rust.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1273",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1273/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1273/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1273/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1273",
    "id": 734723254,
    "node_id": "MDU6SXNzdWU3MzQ3MjMyNTQ=",
    "number": 1273,
    "title": "Zone cut NS RRs returned as authoritative records",
    "user": {
      "login": "SivaKesava1",
      "id": 11771739,
      "node_id": "MDQ6VXNlcjExNzcxNzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11771739?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SivaKesava1",
      "html_url": "https://github.com/SivaKesava1",
      "followers_url": "https://api.github.com/users/SivaKesava1/followers",
      "following_url": "https://api.github.com/users/SivaKesava1/following{/other_user}",
      "gists_url": "https://api.github.com/users/SivaKesava1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SivaKesava1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SivaKesava1/subscriptions",
      "organizations_url": "https://api.github.com/users/SivaKesava1/orgs",
      "repos_url": "https://api.github.com/users/SivaKesava1/repos",
      "events_url": "https://api.github.com/users/SivaKesava1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SivaKesava1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2480373148,
        "node_id": "MDU6TGFiZWwyNDgwMzczMTQ4",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/compliance",
        "name": "compliance",
        "color": "fbca04",
        "default": false,
        "description": "Not compliant to DNS standard operations"
      },
      {
        "id": 692624038,
        "node_id": "MDU6TGFiZWw2OTI2MjQwMzg=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:server",
        "name": "crate:server",
        "color": "d4c5f9",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-02T18:21:42Z",
    "updated_at": "2020-11-04T17:50:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi again,\r\n\r\nSimilar to #1272, the issue exists with child NS records also. Consider the same zone file,\r\n\r\n|  \t|  \t|  \t|  \t|\r\n|-\t|-\t|-\t|-\t|\r\n| example.com. \t| 60480 \t| SOA \t| ns1.outside.com. root.example.com. 3 604800 86400 2419200 604800 \t|\r\n| example.com. \t| 60480 \t| NS \t| ns1.outside.com.  \t|\r\n| b.g.example.com. \t| 60480 \t| NS \t| n.b.g.example.com. \t|\r\n| n.b.g.example.com. \t| 60480 \t| A \t| 1.1.1.1  \t|\r\n\r\nFor the query _<b.g.example.com. , NS>_, the TrustDns server returns the following response:\r\n```\r\n          \"rcode NOERROR\",\r\n          \"flags QR AA\",\r\n          \";QUESTION\",\r\n          \"b.g.example.com. IN NS\",\r\n          \";ANSWER\",\r\n          \"b.g.example.com. 60480 IN NS n.b.g.example.com.\",\r\n          \";AUTHORITY\",\r\n          \"example.com. 60480 IN NS ns1.outside.edu.\",\r\n          \";ADDITIONAL\",\r\n          \"n.b.g.example.com. 60480 IN A 1.1.1.1\"\r\n```\r\n**Expected behavior**\r\nThe **AA** bit is set in the response, which should not be as this is a child NS record, and the parent is not authoritative of the record. The server should return an empty answer but place `<b.g.example.com, NS>` in the authority section and the glue record in the additional section as per [RFC 6672, Section 3.2, Point 3B](https://tools.ietf.org/html/rfc6672#page-9). The `<example.com, NS>` is generally not returned.\r\n\r\n**System:**\r\n - OS: Ubuntu\r\n - Architecture:  x86_64\r\n - Version: 18\r\n - rustc version: cargo 1.47.0\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1272",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1272/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1272/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1272/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1272",
    "id": 734713686,
    "node_id": "MDU6SXNzdWU3MzQ3MTM2ODY=",
    "number": 1272,
    "title": "Glue records returned as authoritative records by the server",
    "user": {
      "login": "SivaKesava1",
      "id": 11771739,
      "node_id": "MDQ6VXNlcjExNzcxNzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11771739?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SivaKesava1",
      "html_url": "https://github.com/SivaKesava1",
      "followers_url": "https://api.github.com/users/SivaKesava1/followers",
      "following_url": "https://api.github.com/users/SivaKesava1/following{/other_user}",
      "gists_url": "https://api.github.com/users/SivaKesava1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SivaKesava1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SivaKesava1/subscriptions",
      "organizations_url": "https://api.github.com/users/SivaKesava1/orgs",
      "repos_url": "https://api.github.com/users/SivaKesava1/repos",
      "events_url": "https://api.github.com/users/SivaKesava1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SivaKesava1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2480373148,
        "node_id": "MDU6TGFiZWwyNDgwMzczMTQ4",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/compliance",
        "name": "compliance",
        "color": "fbca04",
        "default": false,
        "description": "Not compliant to DNS standard operations"
      },
      {
        "id": 692624038,
        "node_id": "MDU6TGFiZWw2OTI2MjQwMzg=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:server",
        "name": "crate:server",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 245488045,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDU=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/enhance",
        "name": "enhance",
        "color": "1d76db",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-11-02T18:06:18Z",
    "updated_at": "2020-12-02T23:01:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi,\r\n\r\nI was checking out TrustDns as an authoritative DNS server and gave it a small test zone as input.\r\n\r\n|  \t|  \t|  \t|  \t|\r\n|-\t|-\t|-\t|-\t|\r\n| example.com. \t| 60480 \t| SOA \t| ns1.outside.com. root.example.com. 3 604800 86400 2419200 604800 \t|\r\n| example.com. \t| 60480 \t| NS \t| ns1.outside.com.  \t|\r\n| b.g.example.com. \t| 60480 \t| NS \t| n.b.g.example.com. \t|\r\n| n.b.g.example.com. \t| 60480 \t| A \t| 1.1.1.1  \t|\r\n\r\nFor the query _<n.b.g.example.com. , A>_, the TrustDns server returns the following response:\r\n\r\n```\r\n          \"rcode NOERROR\",\r\n          \"flags QR AA\",\r\n          \";QUESTION\",\r\n          \"n.b.g.example.com. IN A\",\r\n          \";ANSWER\",\r\n          \"n.b.g.example.com. 60480 IN A 1.1.1.1\",\r\n          \";AUTHORITY\",\r\n          \"example.com. 604800 IN NS ns1.outside.edu.\",\r\n          \";ADDITIONAL\"\r\n```\r\n**Expected behavior**\r\nThe **AA** bit is set in the response, which should not be as this is a glue record and the zone file is not authoritative of it. The server should return an empty answer but place `<b.g.example.com, NS>` in the authority section (not the  `<example.com, NS>` ) and the glue record in the additional section as per [RFC 6672, Section 3.2, Point 3B](https://tools.ietf.org/html/rfc6672#page-9).\r\n\r\n**System:**\r\n - OS: Ubuntu\r\n - Architecture:  x86_64\r\n - Version: 18\r\n - rustc version: cargo 1.47.0\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1265",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1265/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1265/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1265/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/pull/1265",
    "id": 729971259,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTEwMzU5ODQ1",
    "number": 1265,
    "title": "Update high ResponseCode in EDNS Section if required",
    "user": {
      "login": "jonasbb",
      "id": 273459,
      "node_id": "MDQ6VXNlcjI3MzQ1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/273459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasbb",
      "html_url": "https://github.com/jonasbb",
      "followers_url": "https://api.github.com/users/jonasbb/followers",
      "following_url": "https://api.github.com/users/jonasbb/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasbb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasbb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasbb/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasbb/orgs",
      "repos_url": "https://api.github.com/users/jonasbb/repos",
      "events_url": "https://api.github.com/users/jonasbb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasbb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-26T23:13:01Z",
    "updated_at": "2020-10-27T15:22:03Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/bluejekyll/trust-dns/pulls/1265",
      "html_url": "https://github.com/bluejekyll/trust-dns/pull/1265",
      "diff_url": "https://github.com/bluejekyll/trust-dns/pull/1265.diff",
      "patch_url": "https://github.com/bluejekyll/trust-dns/pull/1265.patch"
    },
    "body": "\nSome ResponseCodes have high bits which require EDNS to encode them.\nThis commit updates Message::set_response_code and\nMessageResponseBuiler::error_msg to silently create a EDNS section if\nrequired and sets the high bits there.\n\nThis also adds a warning to Header::set_response_code that this function\ncannot set the high bits.\n\nCloses #1203\nCloses #1207",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1222",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1222/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1222/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1222/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1222",
    "id": 710584945,
    "node_id": "MDU6SXNzdWU3MTA1ODQ5NDU=",
    "number": 1222,
    "title": "Improve resolve.rs responses by including additional section in response (additional is often A/AAAA records)",
    "user": {
      "login": "bluejekyll",
      "id": 986845,
      "node_id": "MDQ6VXNlcjk4Njg0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/986845?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bluejekyll",
      "html_url": "https://github.com/bluejekyll",
      "followers_url": "https://api.github.com/users/bluejekyll/followers",
      "following_url": "https://api.github.com/users/bluejekyll/following{/other_user}",
      "gists_url": "https://api.github.com/users/bluejekyll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bluejekyll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bluejekyll/subscriptions",
      "organizations_url": "https://api.github.com/users/bluejekyll/orgs",
      "repos_url": "https://api.github.com/users/bluejekyll/repos",
      "events_url": "https://api.github.com/users/bluejekyll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bluejekyll/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 692624377,
        "node_id": "MDU6TGFiZWw2OTI2MjQzNzc=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:resolver",
        "name": "crate:resolver",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 245488045,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDU=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/enhance",
        "name": "enhance",
        "color": "1d76db",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-28T21:19:14Z",
    "updated_at": "2020-09-28T21:19:30Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "Right now for NS queries, for example, the additional section is not include in the lookup response.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1221",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1221/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1221/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1221/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1221",
    "id": 710583423,
    "node_id": "MDU6SXNzdWU3MTA1ODM0MjM=",
    "number": 1221,
    "title": "queries for SOA improperly identify as empty responses even when the SOA is present",
    "user": {
      "login": "bluejekyll",
      "id": 986845,
      "node_id": "MDQ6VXNlcjk4Njg0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/986845?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bluejekyll",
      "html_url": "https://github.com/bluejekyll",
      "followers_url": "https://api.github.com/users/bluejekyll/followers",
      "following_url": "https://api.github.com/users/bluejekyll/following{/other_user}",
      "gists_url": "https://api.github.com/users/bluejekyll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bluejekyll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bluejekyll/subscriptions",
      "organizations_url": "https://api.github.com/users/bluejekyll/orgs",
      "repos_url": "https://api.github.com/users/bluejekyll/repos",
      "events_url": "https://api.github.com/users/bluejekyll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bluejekyll/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 245488043,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDM=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/bug",
        "name": "bug",
        "color": "fc2929",
        "default": true,
        "description": null
      },
      {
        "id": 703544093,
        "node_id": "MDU6TGFiZWw3MDM1NDQwOTM=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:proto",
        "name": "crate:proto",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 692624377,
        "node_id": "MDU6TGFiZWw2OTI2MjQzNzc=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:resolver",
        "name": "crate:resolver",
        "color": "d4c5f9",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-28T21:16:12Z",
    "updated_at": "2020-10-22T21:03:42Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "This is most likely due to the `DnsResponse::contains_answer`, though the logic looks correct\r\n\r\nhttps://github.com/bluejekyll/trust-dns/blob/main/crates/proto/src/xfer/dns_response.rs#L127-L132",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1209",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1209/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1209/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1209/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1209",
    "id": 704038444,
    "node_id": "MDU6SXNzdWU3MDQwMzg0NDQ=",
    "number": 1209,
    "title": "[Advice Needed] Looking to build a friendly UI and schedule domain disabling for Home/Business networks",
    "user": {
      "login": "rrichardson",
      "id": 124171,
      "node_id": "MDQ6VXNlcjEyNDE3MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/124171?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rrichardson",
      "html_url": "https://github.com/rrichardson",
      "followers_url": "https://api.github.com/users/rrichardson/followers",
      "following_url": "https://api.github.com/users/rrichardson/following{/other_user}",
      "gists_url": "https://api.github.com/users/rrichardson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rrichardson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rrichardson/subscriptions",
      "organizations_url": "https://api.github.com/users/rrichardson/orgs",
      "repos_url": "https://api.github.com/users/rrichardson/repos",
      "events_url": "https://api.github.com/users/rrichardson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rrichardson/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 839628886,
        "node_id": "MDU6TGFiZWw4Mzk2Mjg4ODY=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/question",
        "name": "question",
        "color": "eeeeee",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-18T02:50:12Z",
    "updated_at": "2020-09-18T16:23:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "First, thanks for building such an amazing set of libraries and tools!  This is a pretty amazing body of work. Also, apologies in advance for the length of this message. \r\n\r\n**Question setup:**  Living the COVID lifestyle, I have 3 young kids at home that conduct 90% of their school curriculum on a computer.  They find themselves being distracted by the multitude of gaming websites out on the interwebs instead of doing their schoolwork. \r\n\r\nI'd like to be able to create a DNS server for home use that can fail-to-resolve a number of deny-lilsted domains during a pre-set schedule.  I plan to build a UI in Sauron or Yew that would provide a simple way to schedule domains to be disabled at fixed times of the day/week.  I figure this could also be useful for businesspeople who find themselves drifting to Reddit or Facebook too often. \r\n\r\n**Question A:** It seems to me that what I'm asking for is a way to build a DNS server that intentionally returns incorrect answers. I \r\ncan think of 2 way to do this: \r\n\r\n1. Use the more traditional DNS server approach with DDNS Updates, where this server pretends to be authoritative for every zone I am trying to deny. It just has incorrect records during certain times of the day. \r\n2. Execute the DNS request/response as normal, but hook the response and check against my deny-list, and if the domain is blocked, rewrite the response with a fake response. \r\n\r\nIn both cases, I am guessing that the server would have to insist on executing only recursive queries. \r\n\r\n**Question B**:  What would be the best strategy for executing dynamic updates on a DNS server that is also a web server?  It seems like a DNS server that returns incorrect answers. \r\n\r\nI guess this depends on answer 0.  If I'm using option 2, then I would just use the DNS Server lib and add my custom hooks, then I'd link in Warp or some other HTTP framework library to serve the Web UI portion. \r\n\r\nIf it is going to option 1, and issue dynamic updates, should I use RFC2136 from the Client (Linking the client in with the server) or is there an API in the server to directly update the zone DB records?\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1207",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1207/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1207/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1207/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/pull/1207",
    "id": 703021780,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDg4MjAyNDE4",
    "number": 1207,
    "title": "Catalog response code",
    "user": {
      "login": "jonasbb",
      "id": 273459,
      "node_id": "MDQ6VXNlcjI3MzQ1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/273459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasbb",
      "html_url": "https://github.com/jonasbb",
      "followers_url": "https://api.github.com/users/jonasbb/followers",
      "following_url": "https://api.github.com/users/jonasbb/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasbb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasbb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasbb/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasbb/orgs",
      "repos_url": "https://api.github.com/users/jonasbb/repos",
      "events_url": "https://api.github.com/users/jonasbb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasbb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-09-16T19:35:03Z",
    "updated_at": "2020-12-29T10:53:59Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/bluejekyll/trust-dns/pulls/1207",
      "html_url": "https://github.com/bluejekyll/trust-dns/pull/1207",
      "diff_url": "https://github.com/bluejekyll/trust-dns/pull/1207.diff",
      "patch_url": "https://github.com/bluejekyll/trust-dns/pull/1207.patch"
    },
    "body": "This fixes how `Catalog` sets the `BADVERS` response code.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1203",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1203/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1203/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1203/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1203",
    "id": 701974477,
    "node_id": "MDU6SXNzdWU3MDE5NzQ0Nzc=",
    "number": 1203,
    "title": "`MessageResponseBuilder::error_msg` does not support all RCODEs",
    "user": {
      "login": "jonasbb",
      "id": 273459,
      "node_id": "MDQ6VXNlcjI3MzQ1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/273459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasbb",
      "html_url": "https://github.com/jonasbb",
      "followers_url": "https://api.github.com/users/jonasbb/followers",
      "following_url": "https://api.github.com/users/jonasbb/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasbb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasbb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasbb/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasbb/orgs",
      "repos_url": "https://api.github.com/users/jonasbb/repos",
      "events_url": "https://api.github.com/users/jonasbb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasbb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 692624038,
        "node_id": "MDU6TGFiZWw2OTI2MjQwMzg=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:server",
        "name": "crate:server",
        "color": "d4c5f9",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-09-15T14:21:55Z",
    "updated_at": "2020-09-16T19:54:24Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\n`MessageResponseBuilder::error_msg` allows to construct a response message with a given response code. The implementation fails to set the EDNS options if the response code requires EDNS.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nA minimal implementation of `RequestHandler` for the `server` crate:\r\n\r\n```rust\r\nimpl trust_dns_server::server::RequestHandler for Handler {\r\n    type ResponseFuture = future::Ready<()>;\r\n\r\n    fn handle_request<R: ResponseHandler>(\r\n        &self,\r\n        request: trust_dns_server::server::Request,\r\n        response_handle: R,\r\n    ) -> Self::ResponseFuture {\r\n        let request_message = request.message;\r\n        if let Some(req_edns) = request_message.edns() {\r\n            let response = MessageResponseBuilder::new(Some(request_message.raw_queries()));\r\n            let our_version = 0;\r\n            if req_edns.version() > our_version {\r\n                response_handle\r\n                    .send_response(response.error_msg(\r\n                        request_message.id(),\r\n                        request_message.op_code(),\r\n                        ResponseCode::BADVERS,\r\n                    ))\r\n                    .unwrap();\r\n                return future::ready(());\r\n            }\r\n        } else {\r\n            todo!()\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis code should produce a DNS response with the status code `BADVERS` but it does not create a EDNS record, thus it will end up as `NOERROR`. The lower 4 bit of `BADVERS` are all 0 which maps to the `NOERROR` value.\r\n\r\n**Expected behavior**\r\nSilently changing the response code is very bad. I can see two possible solutions here:\r\n\r\n1. Silently add a EDNS record to the message and set the high response code there.\r\nThis would be the most developer friendly solution. If a EDNS record already exists it simply sets the high bits. This could lead to a situation where the server response with a EDNS record even if the client didn't specify EDNS support. But these \"extended\" response codes only make sense in the presence of EDNS.\r\n2. Return an error when setting a response code which requires EDNS. This would require to change the function signature to return a `Result<_, _>`.\r\n\r\nOne problem with both solutions is that [`MessageResponse::set_edns`](https://docs.rs/trust-dns-server/0.20.0-alpha.1/trust_dns_server/authority/struct.MessageResponse.html#method.set_edns) allows to overwrite the EDNS record of the response after setting the correct response code bits. This again could silently alter the intended response code.\r\n\r\n**Version:**\r\nCrate: server\r\nVersion: 0.20.0-alpha.1 and main\r\n\r\n**Additional context**\r\n\r\nThe same problem is also present in `trust_dns_server::authority::Catalog` (0.20.0-alpha.1 and main).\r\nhttps://github.com/bluejekyll/trust-dns/blob/48f625ad0de450329fcf628db779b21ae6eddfda/crates/server/src/authority/catalog.rs#L94-L124\r\nHere the problem is not related to the use of `error_msg`, but the code implements the behavior manually and forgets to set the high response code in the EDNS record.\r\n\r\nThe documentation for [`Header::set_response_code`](https://docs.rs/trust-dns-proto/0.20.0-alpha.1/trust_dns_proto/op/header/struct.Header.html#method.set_response_code) hints that it does not support all response codes. The documentation could be improved with a link to `EDNS` and a small example how to properly set any response code.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1190",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1190/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1190/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1190/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/pull/1190",
    "id": 679654606,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDY4MzcyOTY3",
    "number": 1190,
    "title": "Flat name",
    "user": {
      "login": "bluejekyll",
      "id": 986845,
      "node_id": "MDQ6VXNlcjk4Njg0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/986845?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bluejekyll",
      "html_url": "https://github.com/bluejekyll",
      "followers_url": "https://api.github.com/users/bluejekyll/followers",
      "following_url": "https://api.github.com/users/bluejekyll/following{/other_user}",
      "gists_url": "https://api.github.com/users/bluejekyll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bluejekyll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bluejekyll/subscriptions",
      "organizations_url": "https://api.github.com/users/bluejekyll/orgs",
      "repos_url": "https://api.github.com/users/bluejekyll/repos",
      "events_url": "https://api.github.com/users/bluejekyll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bluejekyll/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-15T22:51:51Z",
    "updated_at": "2020-10-08T20:12:44Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/bluejekyll/trust-dns/pulls/1190",
      "html_url": "https://github.com/bluejekyll/trust-dns/pull/1190",
      "diff_url": "https://github.com/bluejekyll/trust-dns/pull/1190.diff",
      "patch_url": "https://github.com/bluejekyll/trust-dns/pull/1190.patch"
    },
    "body": "An attempt at making Name have zero-overhead options.\r\n\r\nthis currently show a performance degradation over the existing implementation.\r\n\r\nUntil I can figure out if there's a way around those, I'll be leaving this as a draft for experimentation.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1155",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1155/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1155/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1155/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1155",
    "id": 646968250,
    "node_id": "MDU6SXNzdWU2NDY5NjgyNTA=",
    "number": 1155,
    "title": "feature request: make trust_dns_proto Message::update_counts public",
    "user": {
      "login": "Sherlock-Holo",
      "id": 10096425,
      "node_id": "MDQ6VXNlcjEwMDk2NDI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10096425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sherlock-Holo",
      "html_url": "https://github.com/Sherlock-Holo",
      "followers_url": "https://api.github.com/users/Sherlock-Holo/followers",
      "following_url": "https://api.github.com/users/Sherlock-Holo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sherlock-Holo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sherlock-Holo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sherlock-Holo/subscriptions",
      "organizations_url": "https://api.github.com/users/Sherlock-Holo/orgs",
      "repos_url": "https://api.github.com/users/Sherlock-Holo/repos",
      "events_url": "https://api.github.com/users/Sherlock-Holo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sherlock-Holo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 245488048,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDg=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/unclear",
        "name": "unclear",
        "color": "777777",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-28T17:18:18Z",
    "updated_at": "2020-07-18T20:23:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI am trying to use trust_dns_proto to write a dns server, instead of using `DnsRequest`, I am using the `Message` directly but it can't use `set_query_count` because `Message` only implements `Deref` and can return the `&Header`. If `Message` can return a `&mut Header` or implement `DerefMut` this problem can be fixed.\r\n\r\n**Describe the solution you'd like**\r\n`Message` can return a `&mut Header` or implement `DerefMut` \r\n\r\n**Describe alternatives you've considered**\r\nNo good idea, only can use `message.queries().len()` to get the query count\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1154",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1154/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1154/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1154/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1154",
    "id": 646710356,
    "node_id": "MDU6SXNzdWU2NDY3MTAzNTY=",
    "number": 1154,
    "title": "add ProtoErrorKind::BufferNotEnough",
    "user": {
      "login": "Sherlock-Holo",
      "id": 10096425,
      "node_id": "MDQ6VXNlcjEwMDk2NDI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10096425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sherlock-Holo",
      "html_url": "https://github.com/Sherlock-Holo",
      "followers_url": "https://api.github.com/users/Sherlock-Holo/followers",
      "following_url": "https://api.github.com/users/Sherlock-Holo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sherlock-Holo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sherlock-Holo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sherlock-Holo/subscriptions",
      "organizations_url": "https://api.github.com/users/Sherlock-Holo/orgs",
      "repos_url": "https://api.github.com/users/Sherlock-Holo/repos",
      "events_url": "https://api.github.com/users/Sherlock-Holo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sherlock-Holo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 703544093,
        "node_id": "MDU6TGFiZWw3MDM1NDQwOTM=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:proto",
        "name": "crate:proto",
        "color": "d4c5f9",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-27T16:17:13Z",
    "updated_at": "2020-06-29T19:32:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nI am trying to use `trust_dns_proto` `BinDecodable` to parse the DNS request from UDP, when the buffer is not enough, it return `ProtoErrorKind::Msg` with string `\"buffer exhausted\"`. This is hard to check this error, If add a new `ProtoErrorKind::BufferNotEnough` to describe this error, it should be easier to handle this error.\r\n\r\n**Describe the solution you'd like**\r\n\r\n`ProtoErrorKind` add new value `ProtoErrorKind::BufferNotEnough`\r\n\r\n**Describe alternatives you've considered**\r\n\r\ncheck the string in `ProtoErrorKind::Msg`, like \r\n```rust\r\nif let ProtoErrorKind:Msg(err_str) = err_kind {\r\n    if err_str == \"buffer exhausted\" {\r\n        // handle error\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1153",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1153/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1153/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1153/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1153",
    "id": 646458143,
    "node_id": "MDU6SXNzdWU2NDY0NTgxNDM=",
    "number": 1153,
    "title": "how to send a valid MessageResponse with ResponseHandler",
    "user": {
      "login": "Sherlock-Holo",
      "id": 10096425,
      "node_id": "MDQ6VXNlcjEwMDk2NDI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10096425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sherlock-Holo",
      "html_url": "https://github.com/Sherlock-Holo",
      "followers_url": "https://api.github.com/users/Sherlock-Holo/followers",
      "following_url": "https://api.github.com/users/Sherlock-Holo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sherlock-Holo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sherlock-Holo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sherlock-Holo/subscriptions",
      "organizations_url": "https://api.github.com/users/Sherlock-Holo/orgs",
      "repos_url": "https://api.github.com/users/Sherlock-Holo/repos",
      "events_url": "https://api.github.com/users/Sherlock-Holo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sherlock-Holo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 839628886,
        "node_id": "MDU6TGFiZWw4Mzk2Mjg4ODY=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/question",
        "name": "question",
        "color": "eeeeee",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-26T19:09:26Z",
    "updated_at": "2020-07-05T02:04:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I am learning using trust-dns-server and try to write my test server\r\n\r\nI try the codes \r\n\r\n```rust\r\nuse std::future::Future;\r\nuse std::net::Ipv4Addr;\r\nuse std::pin::Pin;\r\n\r\nuse trust_dns_server::authority::MessageResponseBuilder;\r\nuse trust_dns_server::proto::op::Header;\r\nuse trust_dns_server::proto::rr::{RData, Record};\r\nuse trust_dns_server::server::{Request, RequestHandler, ResponseHandler};\r\n\r\nstruct Server;\r\n\r\nimpl RequestHandler for Server {\r\n    type ResponseFuture = Pin<Box<dyn Future<Output = ()> + Send + 'static>>;\r\n\r\n    fn handle_request<R: ResponseHandler>(\r\n        &self,\r\n        request: Request,\r\n        response_handle: R,\r\n    ) -> Self::ResponseFuture {\r\n        Box::pin(async move {\r\n            let message = request.message;\r\n\r\n            eprintln!(\"request {:?}\", message);\r\n\r\n            let mut header = Header::new();\r\n            header\r\n                .set_id(message.id())\r\n                .set_message_type(message.message_type())\r\n                .set_op_code(message.op_code())\r\n                .set_authoritative(message.authoritative())\r\n                .set_truncated(message.truncated())\r\n                .set_recursion_desired(message.recursion_desired())\r\n                .set_recursion_available(message.recursion_available())\r\n                .set_authentic_data(message.authentic_data())\r\n                .set_checking_disabled(message.checking_disabled());\r\n\r\n            let record = Record::from_rdata(\r\n                message.queries()[0].name().into(),\r\n                64,\r\n                RData::A(Ipv4Addr::new(1, 1, 1, 1)),\r\n            );\r\n\r\n            let response = MessageResponseBuilder::new(Some(message.raw_queries())).build(\r\n                header,\r\n                Box::new(vec![record].iter()),\r\n                Box::new(vec![].iter()),\r\n                Box::new(vec![].iter()),\r\n                Box::new(vec![].iter()),\r\n            );\r\n\r\n            response_handle.send_response(response).unwrap();\r\n        })\r\n    }\r\n}\r\n```\r\n\r\nbut cargo check reports an error, \r\n\r\n> ```\r\n> error[E0308]: mismatched types\r\n>   --> src/main.rs:90:47\r\n>    |\r\n> 90 |                 response_handle.send_response(response).unwrap();\r\n>    |                                               ^^^^^^^^ expected trait object `dyn std::iter::Iterator`, found struct `std::slice::Iter`\r\n>    |\r\n>    = note: expected struct `trust_dns_server::authority::message_response::MessageResponse<'_, '_, std::boxed::Box<dyn std::iter::Iterator<Item = &trust_dns_proto::rr::resource::Record> + std::marker::Send>, std::boxed::Box<dyn std::iter::Iterator<Item = &trust_dns_proto::rr::resource::Record> + std::marker::Send>, std::boxed::Box<dyn std::iter::Iterator<Item = &trust_dns_proto::rr::resource::Record> + std::marker::Send>, std::boxed::Box<dyn std::iter::Iterator<Item = &trust_dns_proto::rr::resource::Record> + std::marker::Send>>`\r\n>               found struct `trust_dns_server::authority::message_response::MessageResponse<'_, '_, std::boxed::Box<std::slice::Iter<'_, trust_dns_proto::rr::resource::Record>>, std::boxed::Box<std::slice::Iter<'_, trust_dns_proto::rr::resource::Record>>, std::boxed::Box<std::slice::Iter<'_, trust_dns_proto::rr::resource::Record>>, std::boxed::Box<std::slice::Iter<'_, trust_dns_proto::rr::resource::Record>>>`\r\n> \r\n> error: aborting due to previous error\r\n> \r\n> For more information about this error, try `rustc --explain E0308`.\r\n> error: could not compile `learn`.\r\n> \r\n> To learn more, run the command again with --verbose.\r\n> ```\r\n\r\nthat confuse me because I think this codes should be right\r\n\r\nCould anyone tell me how to modify the codes",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1133",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1133/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1133/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1133/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1133",
    "id": 636331260,
    "node_id": "MDU6SXNzdWU2MzYzMzEyNjA=",
    "number": 1133,
    "title": "Can this library run in WASM?",
    "user": {
      "login": "amaurymartiny",
      "id": 1293565,
      "node_id": "MDQ6VXNlcjEyOTM1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1293565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amaurymartiny",
      "html_url": "https://github.com/amaurymartiny",
      "followers_url": "https://api.github.com/users/amaurymartiny/followers",
      "following_url": "https://api.github.com/users/amaurymartiny/following{/other_user}",
      "gists_url": "https://api.github.com/users/amaurymartiny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amaurymartiny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amaurymartiny/subscriptions",
      "organizations_url": "https://api.github.com/users/amaurymartiny/orgs",
      "repos_url": "https://api.github.com/users/amaurymartiny/repos",
      "events_url": "https://api.github.com/users/amaurymartiny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amaurymartiny/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 692624377,
        "node_id": "MDU6TGFiZWw2OTI2MjQzNzc=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:resolver",
        "name": "crate:resolver",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 2132795613,
        "node_id": "MDU6TGFiZWwyMTMyNzk1NjEz",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/platform:WASM",
        "name": "platform:WASM",
        "color": "76a3d3",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-10T15:12:03Z",
    "updated_at": "2020-06-12T15:52:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nI'm trying to deploy my code to Cloudfare Workers, which run JS & WASM. Specifically, I'm using the `async-std-resolver` crate, but right now compilation fails.\r\n\r\n```\r\nerror: Unsupported target OS! Create an issue: https://github.com/svartalf/hostname/issues/new\r\n  --> /Users/amaurymartiny/.cargo/registry/src/github.com-1ecc6299db9ec823/hostname-0.3.1/src/lib.rs:81:9\r\n   |\r\n81 |         compile_error!(\"Unsupported target OS! Create an issue: https://github.com/svartalf/hostname/issues/new\");\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nerror[E0433]: failed to resolve: use of undeclared type or module `sys`\r\n   --> /Users/amaurymartiny/.cargo/registry/src/github.com-1ecc6299db9ec823/hostname-0.3.1/src/lib.rs:105:5\r\n    |\r\n105 |     sys::get()\r\n    |     ^^^ use of undeclared type or module `sys`\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nAdd a feature flag which would allow targetting this library to WASM.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nn/a\r\n\r\n**Additional context**\r\n\r\nRight now, it relies on `resolv-conf`, which iiuc can't be compiled to wasm. Maybe returning an empty-file stub in wasm would work?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1132",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1132/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1132/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1132/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1132",
    "id": 636270172,
    "node_id": "MDU6SXNzdWU2MzYyNzAxNzI=",
    "number": 1132,
    "title": "ResolverConfig and ResolverOpts loaded by read_system_conf should be updated automatically when system's conf is changed",
    "user": {
      "login": "zonyitoo",
      "id": 1067951,
      "node_id": "MDQ6VXNlcjEwNjc5NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1067951?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zonyitoo",
      "html_url": "https://github.com/zonyitoo",
      "followers_url": "https://api.github.com/users/zonyitoo/followers",
      "following_url": "https://api.github.com/users/zonyitoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/zonyitoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zonyitoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zonyitoo/subscriptions",
      "organizations_url": "https://api.github.com/users/zonyitoo/orgs",
      "repos_url": "https://api.github.com/users/zonyitoo/repos",
      "events_url": "https://api.github.com/users/zonyitoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zonyitoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 692624377,
        "node_id": "MDU6TGFiZWw2OTI2MjQzNzc=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:resolver",
        "name": "crate:resolver",
        "color": "d4c5f9",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-06-10T13:56:33Z",
    "updated_at": "2020-11-18T02:00:38Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\nAfter recover from hibernate on OS X, `AsyncResolver::lookup_ip` will not return even if network is fine (all the other applications works fine).\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\n1. Run a server (tokio, multi-thread scheduler) on OS X\r\n2. Let system go into hibernate state\r\n3. (optional) Go to another place, connect to another Wi-Fi\r\n4. Recover from hibernate\r\n\r\nNearly 100% reproduciable.\r\n\r\n**Expected behavior**\r\n\r\n`AsyncResolver::lookup_ip` should work after recover from hibernate like all the other applications.\r\n\r\n**System:**\r\n - OS: macOS\r\n - Architecture: x86_64\r\n - Version: 10.15.5\r\n - rustc version: 1.46.0-nightly (feb3536eb 2020-06-09)\r\n\r\n**Version:**\r\nCrate: resolver\r\nVersion: 0.19.5",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1131",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1131/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1131/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1131/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1131",
    "id": 633577234,
    "node_id": "MDU6SXNzdWU2MzM1NzcyMzQ=",
    "number": 1131,
    "title": "Error parsing resolve.conf",
    "user": {
      "login": "Victordmdb",
      "id": 988352,
      "node_id": "MDQ6VXNlcjk4ODM1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/988352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Victordmdb",
      "html_url": "https://github.com/Victordmdb",
      "followers_url": "https://api.github.com/users/Victordmdb/followers",
      "following_url": "https://api.github.com/users/Victordmdb/following{/other_user}",
      "gists_url": "https://api.github.com/users/Victordmdb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Victordmdb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Victordmdb/subscriptions",
      "organizations_url": "https://api.github.com/users/Victordmdb/orgs",
      "repos_url": "https://api.github.com/users/Victordmdb/repos",
      "events_url": "https://api.github.com/users/Victordmdb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Victordmdb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 245488043,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDM=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/bug",
        "name": "bug",
        "color": "fc2929",
        "default": true,
        "description": null
      },
      {
        "id": 692624377,
        "node_id": "MDU6TGFiZWw2OTI2MjQzNzc=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:resolver",
        "name": "crate:resolver",
        "color": "d4c5f9",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-06-07T16:59:05Z",
    "updated_at": "2020-10-28T15:04:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Error parsing resolve.conf: InvalidOption(5)\r\n\r\nresolve.conf (I removed IP addresses):\r\n\r\n##Generated by chef\r\nnameserver <IP1>\r\nnameserver <IP2>\r\nnameserver <IP3>\r\nsearch nam.rootns.net lac.rootns.net eur.rootns.net apac.rootns.net rootns.net\r\noptions retrans:1 retry:1",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1100",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1100/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1100/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1100/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1100",
    "id": 615452309,
    "node_id": "MDU6SXNzdWU2MTU0NTIzMDk=",
    "number": 1100,
    "title": "DNS lookup on custom TCP-like stream?",
    "user": {
      "login": "Mygod",
      "id": 3511321,
      "node_id": "MDQ6VXNlcjM1MTEzMjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3511321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mygod",
      "html_url": "https://github.com/Mygod",
      "followers_url": "https://api.github.com/users/Mygod/followers",
      "following_url": "https://api.github.com/users/Mygod/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mygod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mygod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mygod/subscriptions",
      "organizations_url": "https://api.github.com/users/Mygod/orgs",
      "repos_url": "https://api.github.com/users/Mygod/repos",
      "events_url": "https://api.github.com/users/Mygod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mygod/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 692623508,
        "node_id": "MDU6TGFiZWw2OTI2MjM1MDg=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:client",
        "name": "crate:client",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 245488045,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDU=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/enhance",
        "name": "enhance",
        "color": "1d76db",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-05-10T18:49:11Z",
    "updated_at": "2020-11-17T16:44:31Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "What is the best way to implement DNS lookup on a custom struct that implements `DnsStreamHandle`, e.g. wrapping a `tokio::net::UnixStream` or a proxy TCP stream, so that it can use all the features in this library, e.g. connection reuse?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1098",
    "repository_url": "https://api.github.com/repos/bluejekyll/trust-dns",
    "labels_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1098/labels{/name}",
    "comments_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1098/comments",
    "events_url": "https://api.github.com/repos/bluejekyll/trust-dns/issues/1098/events",
    "html_url": "https://github.com/bluejekyll/trust-dns/issues/1098",
    "id": 614750778,
    "node_id": "MDU6SXNzdWU2MTQ3NTA3Nzg=",
    "number": 1098,
    "title": "Add support for DNS DNAME records.",
    "user": {
      "login": "DevQps",
      "id": 46896178,
      "node_id": "MDQ6VXNlcjQ2ODk2MTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/46896178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DevQps",
      "html_url": "https://github.com/DevQps",
      "followers_url": "https://api.github.com/users/DevQps/followers",
      "following_url": "https://api.github.com/users/DevQps/following{/other_user}",
      "gists_url": "https://api.github.com/users/DevQps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DevQps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DevQps/subscriptions",
      "organizations_url": "https://api.github.com/users/DevQps/orgs",
      "repos_url": "https://api.github.com/users/DevQps/repos",
      "events_url": "https://api.github.com/users/DevQps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DevQps/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 703544093,
        "node_id": "MDU6TGFiZWw3MDM1NDQwOTM=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/crate:proto",
        "name": "crate:proto",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 245488045,
        "node_id": "MDU6TGFiZWwyNDU0ODgwNDU=",
        "url": "https://api.github.com/repos/bluejekyll/trust-dns/labels/enhance",
        "name": "enhance",
        "color": "1d76db",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-08T13:41:47Z",
    "updated_at": "2020-06-27T20:52:41Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "# Description\r\n\r\nCurrently the DNS DNAME record type is not implemented. RFC6672 describes this DNS record. It has the DNS record type of 39.",
    "performed_via_github_app": null
  }
]
